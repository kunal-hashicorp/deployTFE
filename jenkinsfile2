pipeline {
    agent any

    parameters {
        string(name: 'AWS_ACCESS_KEY_ID', defaultValue: '', description: 'AWS Access Key ID for temporary credentials')
        password(name: 'AWS_SECRET_ACCESS_KEY', defaultValue: '', description: 'AWS Secret Access Key for temporary credentials')
        password(name: 'AWS_SESSION_TOKEN', defaultValue: '', description: 'AWS Session Token for temporary credentials')
        string(name: 'AWS_REGION', defaultValue: 'us-east-1', description: 'AWS Region for deployment')
    }

    environment {
        // CORRECTED LINES: Use double quotes to interpolate the parameter values
        AWS_ACCESS_KEY_ID = "${params.AWS_ACCESS_KEY_ID}"
        AWS_SECRET_ACCESS_KEY = "${params.AWS_SECRET_ACCESS_KEY}"
        AWS_SESSION_TOKEN = "${params.AWS_SESSION_TOKEN}"
        AWS_REGION = "${params.AWS_REGION}" // Also apply here for consistency if using a parameter
        
        PATH = "${tool 'terraform_0.15.5'}/bin:$PATH"
    }

    stages {
        stage('Checkout Code') {
           steps {
                git branch: "${GIT_BRANCH}",
                    //credentialsId: "${GIT_CREDENTIALS_ID}", // Omit this line for public repos
                    url: "${GIT_REPO_URL}"
            }
        }

        stage('Terraform Init') {
            steps {
                script {
                    // Navigate to the directory containing your Terraform files if not at repo root
                    // sh 'cd terraform-code-dir'
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                script {
                    // Navigate to the directory containing your Terraform files if not at repo root
                    // sh 'cd terraform-code-dir'
                    sh 'terraform plan -out=tfplan'
                }
            }
        }

       /* stage('Terraform Apply') {
            // For production, consider adding an input step for manual approval:
            // input message: 'Proceed with Terraform Apply?'

            steps {
                script {
                    // Navigate to the directory containing your Terraform files if not at repo root
                    // sh 'cd terraform-code-dir'
                    sh 'terraform apply -auto-approve tfplan' // Remove -auto-approve for manual confirmation
                }
            }
        } 

        stage('Terraform Destroy (Optional)') {
            // This stage is typically triggered manually or for cleanup branches
            when {
                // Example: Only run if a specific parameter is set
                environment name: 'TRIGGER_DESTROY', value: 'true'
                // Or if it's a specific branch for tear-down
                // branch 'destroy-env-*'
            }
            steps {
                script {
                    // Navigate to the directory containing your Terraform files if not at repo root
                    // sh 'cd terraform-code-dir'
                    sh 'terraform destroy -auto-approve'
                }
            }
        } */
    }

    post {
        always {
            // Clean up workspace
            deleteDir()
        }
        success {
            echo 'Terraform deployment successful!'
        }
        failure {
            echo 'Terraform deployment failed!'
        }
    }
}
